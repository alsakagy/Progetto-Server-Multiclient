<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AABbyEgOWcZQNgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAH//AAJcx1DnXMdQ4l3IUJFdxlA/VaoAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF7M
        UCNdyE9dW8dPhl3HUJxbx1ChXMhQlVzHT3dbyFBGVb8/DAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAF3HUJRdyFH/XchR/13IUf9dyFDpXMdQm1rHUElV1FUGX89PEF3H
        UHhcyFDXXchR/13IUf9dyFH/XchR/13IUf9dyFH/XchR/13IUf9cx1D4XMZQsVzJUUgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWsVOPl3IUf9dyFH/XchR/13IUf9dyFH/XchR/1zH
        UPFcyFHyXchR/13IUf9dyFH/XchR/1zHUPtcyFDlXMdQ4FzHUPBdyFH/XchR/13IUf9dyFH/XchR/13I
        UMhdyU40AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfwACXMdQ5V3IUf9cyFHfW8hQrF3I
        UPRdyFH/XchR/13IUf9dyFH/XMdR2V3HUHtayFAzZswzBQAAAAAAAAAAAAAAAGHOSBVbx05OXMdPnVzH
        UPNdyFH/XchR/1zHUPpcx093AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABdxlCRXchR/1zI
        UPdbtkgOTMxMCl3HUFJcx1ClXMdQz1vITlQA/wABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAWsNLEVzHUYpcx1D6XchR/13IUf9byFCZAP8AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFzF
        TzpdyFH/XchR/1zGTlsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFvKUTVcx1DiXchR/13IUf9dyVCOAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAVzHUOFdyFH/XMhQsQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF7GSxtbyFDbXchR/1zHUP5dyE9dAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAXMdQol3IUf9cx1D4VbtEDwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFXGVQlaxUofP78/BAAAAAAAAAAAAAAAAFzBTSFcx1DrXchR/1zH
        UPFbwVEZAAAAAAAAAAAAAAAAAAAAAFC7UBNcx1DwXchR/1zIUdxfvz8IAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAVapVA1zHT1NcyFC1XcdQ+V3IUf9cx1DvXMdPiki2SAcAAAAAAAAAAFvH
        Tk5cx1D+XchR/1zHUJsAAAAAAAAAAAAAAAAAAAAAXMdQfF3IUf9dyFH/W8dOTgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAF3IT11cyFDdXchR/13IUf9dyFH/XchR/13IUf9dyFH/XMdPnQAA
        AAAAAAAAAAAAAF3IULJdyFH/XMdQ+VXJShgAAAAAAAAAAAAAAABcx1DdXchR/1zIUNEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAF/PTxBcxk+2XchR/13IUf9dyFH/XchR/13IUf9dyFH/XchR/13I
        Uf9cyFH4VdRVBgAAAAAAAAAAW8hNOF3IUf9dyFH/XMhRcQAAAAAAAAAAWMlNK13IUf9dyFH/W8dQcgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABVwkgVXMhQ0V3IUf9dyFH/XchR/1zIUMFcx0+mXchR/13I
        Uf9dyFH/XchR/1zHUNRVxlUJAAAAAAAAAAAAAAAAXchQ2F3IUf9cyFC7AAAAAAAAAABcyFBmXchR/13I
        Uf9YyU0rAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXNBFC1zIUM1dyFH/XchR/1zIUOhbx1FOAAAAAAAA
        AABcx0+gXchR/13HUONdyVBlVapVAwAAAAAAAAAAAAAAAAAAAABbx0+TXchR/13HUPEA/wABAAAAAFzH
        UI9dyFH/XMdQ+FWqAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABcx0+pXchR/13IUf9cyFHWW8hRHAAA
        AAAAAAAAAAAAAFXUVQZcyE9QVdRVBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFrHUGVdyFH/XchR/17G
        SxsAAAAAXchQp13IUf9cyFDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAW8ZQX13IUf9dyFH/XchQ5lvI
        SBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAW8VOS13I
        Uf9dyFH/W8pRNQAAAABcxlGtXchR/13HUNgAAAAAAAAAAAAAAAAAAAAAAAAAAFXCSBVcyFDtXchR/1zH
        UP5ax1BJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABaxk5EXchR/13IUf9cxU1CAAAAAFvHUKFdyFH/XMdQ5QAAAAAAAAAAAAAAAAAAAAAAAAAAXMlRil3I
        Uf9dyFH/XchQyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAF3IUE9dyFH/XchR/1vETz0AAAAAXchPg13IUf9dyFD8VcZVCQAAAAAAAAAAAAAAAAB/
        AAJdx1DpXchR/13IUf9dx1D8W8VOVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAW8dQb13IUf9dyFH/WMROGgAAAABbyE5UXchR/13IUf9dxlA/AAAAAAAA
        AAAAAAAAXclQJl3IUf9dyFH/XchR/13IUf9cyFHyP78/BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABcx1ClXchR/1zHUOcAAAAAAAAAAFzFURZdyFD8XchR/1zH
        UI8AAAAAAAAAAAAAAABaxVIfXchR/13IUf9dyFH/XchR/1zHUMoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVaoqBlzHUO1dyFH/XMdPqQAAAAAAAAAAAAAAAFzI
        UcBdyFH/XMdR7Fy5RQsAAAAAAAAAAAAAAABcxlDfXchR/13IUf9dyFH/W8dPagAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABbx1BcXchR/13IUf9bxlBWAAAAAAAA
        AAAAAAAAXMdRWF3IUf9dyFH/W8dQewAAAAAAAAAAAAAAAFzHUVhcx1D+XchR/1zIUPdaw0sRAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVdRVBlzIUNpdyFH/XMdQ5VWq
        KgYAAAAAAAAAAAAAAABVqlUDXMdQ1V3IUf9cx1D1W8ROJwAAAAAAAAAAAAAAAF3IT11dyFCkXMlQaQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABdx0+GXchR/13I
        Uf9cxlBsAAAAAAAAAAAAAAAAAAAAAAAAAABbx09AXMdQ/V3IUf9dyFDTVcxEDwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXMdPU1zH
        UP1dyFH/XMhQzj+/PwQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABdx0+GXchR/13IUf9dyFDIWb9MFAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF3I
        UE9cx1D4XchR/1zHUPNbwk4qAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/AAJcyFCoXchR/13I
        Uf9cyFDfXcdQPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFWq
        VQNdyFB+XchQ/F3IUf9cx1D5WcdPSgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD+/
        PwRbx1ChXchR/13IUf9cx1D9W8dQpFvITioAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFWq
        VQNcx09TXchQ013IUf9dyFH/XMhQ813HT0oAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABbx1BvXMhQ9l3IUf9dyFH/XMdQ/l3IUMhcx0+BXMhPUFnGUDZbxkwyXMVNQl3H
        UGVcx1GdXMhQ6F3IUf9dyFH/XchR/1zHUNRcylEsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABcxk0kXcdRql3IUPxdyFH/XchR/13IUf9dyFH/XchR/13I
        Uf9dyFH/XchR/13IUf9dyFH/XchR/13IUOtcxk92VdRVBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAV8RQI1zHUYFdyFDNXchQ/F3I
        Uf9dyFH/XchR/13IUf9dyFH/XMdQ8lzHUbNbyVBfTMxMCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABVvz8MW8ZRMlrHUElbx05OXMVRQlzGTSQAfwACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAH////wPwB/+AAAH/gAAAf4ABwD/AD/gPw//+D8P//wfh/+ODwf8Aw8P+
        AOHH+ABhh/AAcYfgYPCH4OPwj8H/8I+D//CPh//whwP/8IcB//GHA//hw4P/4cOD/8HBx//D4P//g/B/
        /wfwP/wP+A/wH/4AAD//AAB//8AB///4D/8=
</value>
  </data>
</root>